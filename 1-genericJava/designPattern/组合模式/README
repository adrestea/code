定义:
Compose objects into tree structures to represent part-whole hierarchies.Composite lets clients treat individual objects and compositions of objects uniformly.(将对象组合成树形结构以表示“部分-整体”的层次结构,使得用户对单个对象和组合对象的使用具有一致性。)


● Component抽象构件角色
定义参加组合对象的共有方法和属性,可以定义一些默认的行为或属性,比如我们例子中的getInfo就封装到了抽象类中。
● Leaf叶子构件
叶子对象,其下再也没有其他的分支,也就是遍历的最小单位。
● Composite树枝构件
树枝对象,它的作用是组合树枝节点和叶子节点形成一个树形结构


优点:
● 高层模块调用简单
一棵树形机构中的所有节点都是Component,局部和整体对调用者来说没有任何区别,也就是说,高层模块不必关心自己处理的是单个对象还是整个组合结构,简化了高层模块的代码。
● 节点自由增加
使用了组合模式后,我们可以看看,如果想增加一个树枝节点、树叶节点是不是都很容易,只要找到它的父节点就成,非常容易扩展,符合开闭原则,对以后的维护非常有利。


缺点:
树叶和树枝使用在面向接口编程上是很不恰当的,与依赖倒置原则冲突.它限制了你接口的影响范围


注意事项:
只要是树形结构,就要考虑使用组合模式,这个一定要记住,只要是要体现局部和整体的关系的时候,而且这种关系还可能比较深,可以考虑组合模式

透明模式：透明模式是树枝节点和树叶节点都是在一个类里面实现，区分的方法是判定是否有下层的树枝节点或者字节点
安全模式：相对与透明模式，是将树枝和树叶分离到两个类。从而避免类的错误判定